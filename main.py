import os
import threading
import psycopg2
from psycopg2.extras import RealDictCursor
from flask import Flask, request, render_template, jsonify
import telebot

# ========= –ö–æ–Ω—Ñ–∏–≥–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è =========
TOKEN = os.environ.get("TELEGRAM_TOKEN")
# URL –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω Render'–æ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
WEB_APP_URL = os.environ.get("WEB_APP_URL") 
# Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç DATABASE_URL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ë–î
DATABASE_URL = os.environ.get("DATABASE_URL")
REGISTER_LINK = "https://u3.shortink.io/register?utm_campaign=825192&utm_source=affiliate&utm_medium=sr&a=PDSrNY9vG5LpeF&ac=1d&code=50START"

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# ========= –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ =========
user_data = {}

# ========= –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL =========
def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL."""
    conn = psycopg2.connect(DATABASE_URL)
    return conn

def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS postbacks (
            id SERIAL PRIMARY KEY,
            event TEXT,
            subid TEXT,
            trader_id TEXT,
            sumdep REAL,
            wdr_sum REAL,
            status TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    c.close()
    conn.close()

def save_postback(event, subid, trader_id, sumdep=None, wdr_sum=None, status=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç–±—ç–∫ –≤ PostgreSQL."""
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("""
        INSERT INTO postbacks (event, subid, trader_id, sumdep, wdr_sum, status)
        VALUES (%s, %s, %s, %s, %s, %s)
        """,
        (event, subid, trader_id, sumdep, wdr_sum, status)
    )
    conn.commit()
    c.close()
    conn.close()

# ========= –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ =========
@bot.message_handler(commands=['start'])
def start_message(message):
    lang = "ru" if (message.from_user.language_code or "").startswith("ru") else "en"
    user_data[message.chat.id] = {"lang": lang}

    markup = telebot.types.InlineKeyboardMarkup()
    web_app_info = telebot.types.WebAppInfo(WEB_APP_URL)
    app_button = telebot.types.InlineKeyboardButton(
        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç" if lang == "ru" else "üöÄ Open App",
        web_app=web_app_info
    )
    markup.add(app_button)
    
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å." if lang == "ru" else "üëã Hello! Press the button below to start.",
        reply_markup=markup
    )

# ========= Flask: —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è Mini App =========
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/get_user_status/<int:chat_id>")
def get_user_status(chat_id):
    conn = get_db_connection()
    c = conn.cursor()

    c.execute("SELECT sumdep FROM postbacks WHERE subid = %s AND event IN ('FTD', 'dep') ORDER BY created_at ASC LIMIT 1", (str(chat_id),))
    deposit_row = c.fetchone()
    
    c.execute("SELECT 1 FROM postbacks WHERE subid = %s AND event = 'reg' LIMIT 1", (str(chat_id),))
    reg_row = c.fetchone()
    
    c.close()
    conn.close()

    status = "unregistered"
    deposit_amount = 0

    if deposit_row:
        status = "deposited"
        deposit_amount = deposit_row[0]
    elif reg_row:
        status = "registered"
    
    lang = user_data.get(chat_id, {}).get("lang", "en")
    referral_link = f"{REGISTER_LINK}&sub_id1={chat_id}"

    return jsonify({
        "status": status,
        "deposit_amount": deposit_amount,
        "lang": lang,
        "referral_link": referral_link
    })

# ========= Flask: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–±–µ–∫–æ–≤ =========
@app.route("/postback", methods=["GET", "POST"])
def partner_postback():
    event = request.args.get("event")
    subid = request.args.get("subid")
    trader_id = request.args.get("trader_id")
    sumdep = request.args.get("sumdep")
    
    if not subid: return "No subid"
    try: chat_id = int(subid)
    except: return "Invalid subid"

    save_postback(event, subid, trader_id, sumdep)

    lang = user_data.get(chat_id, {}).get("lang", "en")

    if event == "reg":
        msg = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! Trader ID: {trader_id}\n\n–¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å." if lang == "ru" else f"‚úÖ Registration confirmed! Trader ID: {trader_id}\n\nPlease return to the app to continue."
        bot.send_message(chat_id, msg)
    
    elif event == "FTD":
        msg = f"üí∞ –í–∞—à –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ ${sumdep} –∑–∞—á–∏—Å–ª–µ–Ω! Trader ID: {trader_id}\n\n–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å!" if lang == "ru" else f"üí∞ Your first deposit of ${sumdep} is confirmed! Trader ID: {trader_id}\n\nGreat, now you can start!"
        bot.send_message(chat_id, msg)

    return "OK"

# ========= –ó–∞–ø—É—Å–∫ =========
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
with app.app_context():
    init_db()

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=bot.infinity_polling, daemon=True).start()

# Gunicorn –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å 'app', –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –Ω–∞ Render
# –û–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080, debug=True)







