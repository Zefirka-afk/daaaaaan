import os
import sqlite3
import threading
from flask import Flask, request, render_template, jsonify
import telebot

# ===================================================================
# =========                   –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø                    =========
# ===================================================================
# !!! –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
TOKEN = "8369181511:AAEvwUn5gQUAXizdvvUpbP4repqU26iKQd0" 

# !!! –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Render
# –ü—Ä–∏–º–µ—Ä: "https://your-app-name.onrender.com"
WEB_APP_URL = "https://daaaaaan.onrender.com"

# ===================================================================
# =========                   –ü–ï–†–ï–í–û–î–´ (TEXTS)                =========
# ===================================================================
TEXTS = {
    'ru': {
        'welcome': "–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞!\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –Ω–∞—á–∞—Ç—å.",
        'my_id': "–¢–≤–æ–π Telegram ID: <b>{id}</b>",
        'reg_success': "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.",
        'ftd_success': "üí∞ <b>–ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç!</b>\n–í—ã –≤–Ω–µ—Å–ª–∏ <b>${sum}</b>. –î–∞–Ω–Ω—ã–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        'dep_success': "‚ûï <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å—á–µ—Ç –Ω–∞ <b>${sum}</b>.",
        'wdr_request': "üíµ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥</b>\n–°—É–º–º–∞: <b>${sum}</b>. –°—Ç–∞—Ç—É—Å: {status}",
        'new_event': "üîî <b>–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:</b> {event}"
    },
    'en': {
        'welcome': "Hello üëã I'm a trading bot!\n\nPress the button below to enter your personal cabinet and get started.",
        'my_id': "Your Telegram ID: <b>{id}</b>",
        'reg_success': "‚úÖ <b>Registration confirmed!</b>\nYour personal cabinet has been updated.",
        'ftd_success': "üí∞ <b>First deposit!</b>\nYou've deposited <b>${sum}</b>. Your cabinet is updated.",
        'dep_success': "‚ûï <b>Deposit</b>\nYou have topped up your account with <b>${sum}</b>.",
        'wdr_request': "üíµ <b>Withdrawal request</b>\nAmount: <b>${sum}</b>. Status: {status}",
        'new_event': "üîî <b>New event:</b> {event}"
    }
}
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
# –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å —è–∑—ã–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫ user_id.
user_langs = {}

# ===================================================================
# =========      –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –í–ï–ë-–°–ï–†–í–ï–†–ê           =========
# ===================================================================
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# ===================================================================
# =========            –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•           =========
# ===================================================================
def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    conn = sqlite3.connect("postbacks.db", check_same_thread=False)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS postbacks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    event TEXT, subid TEXT, trader_id TEXT,
                    sumdep REAL, wdr_sum REAL, status TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )""")
    conn.commit()
    conn.close()

def save_postback(event, subid, trader_id, sumdep=None, wdr_sum=None, status=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å—Ç–±–µ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect("postbacks.db", check_same_thread=False)
    c = conn.cursor()
    c.execute("""INSERT INTO postbacks (event, subid, trader_id, sumdep, wdr_sum, status)
                 VALUES (?, ?, ?, ?, ?, ?)""",
              (event, subid, trader_id, sumdep, wdr_sum, status))
    conn.commit()
    conn.close()

# ===================================================================
# =========                  –õ–û–ì–ò–ö–ê –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ê             =========
# ===================================================================
@bot.message_handler(commands=['start'])
def start_message(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App.
    """
    lang_code = message.from_user.language_code
    lang = 'ru' if lang_code and lang_code.startswith('ru') else 'en'
    user_langs[message.chat.id] = lang  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –ü–µ—Ä–µ–¥–∞–µ–º —è–∑—ã–∫ –≤ URL Mini App
    web_app_info = telebot.types.WebAppInfo(f"{WEB_APP_URL}/app/{lang}") 
    markup.add(telebot.types.KeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç", web_app=web_app_info))
    
    bot.send_message(message.chat.id, TEXTS[lang]['welcome'], reply_markup=markup)

@bot.message_handler(commands=['myid'])
def my_id(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ Telegram ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    lang = user_langs.get(message.chat.id, 'en') # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
    bot.send_message(message.chat.id, TEXTS[lang]['my_id'].format(id=message.chat.id))

# ===================================================================
# =========            –õ–û–ì–ò–ö–ê –í–ï–ë-–°–ï–†–í–ï–†–ê (FLASK)             =========
# ===================================================================
@app.route("/")
def index():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    return "Web server for Telegram Mini App is running."

@app.route("/app/<lang>")
def app_page(lang):
    """–û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Mini App, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤ —à–∞–±–ª–æ–Ω —è–∑—ã–∫."""
    if lang not in ['ru', 'en']:
        lang = 'en'
    return render_template("app.html", lang=lang)

@app.route("/user/<int:chat_id>/data")
def user_data_api(chat_id):
    """API –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: –æ—Ç–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π."""
    conn = sqlite3.connect("postbacks.db", check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT 1 FROM postbacks WHERE subid = ? AND event = 'reg' LIMIT 1", (str(chat_id),))
    is_registered = c.fetchone() is not None
    events = []
    if is_registered:
        c.execute("SELECT event, sumdep, wdr_sum, status, created_at FROM postbacks WHERE subid = ? ORDER BY created_at DESC", (str(chat_id),))
        events = c.fetchall()
    conn.close()
    return jsonify({"is_registered": is_registered, "events": events})

@app.route("/postback", methods=["GET", "POST"])
def partner_postback():
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ—Å—Ç–±–µ–∫–∏ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–µ—Ç–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ."""
    data = request.args
    event, subid = data.get("event"), data.get("subid")
    trader_id, sumdep = data.get("trader_id"), data.get("sumdep")
    wdr_sum, status = data.get("wdr_sum"), data.get("status")

    if not subid: return "No subid provided", 400
    try: chat_id = int(subid)
    except (ValueError, TypeError): return "Invalid subid", 400
    
    save_postback(event, subid, trader_id, sumdep, wdr_sum, status)

    lang = user_langs.get(chat_id, 'en') # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_text = ""
    if event == "reg": message_text = TEXTS[lang]['reg_success']
    elif event == "FTD": message_text = TEXTS[lang]['ftd_success'].format(sum=sumdep)
    elif event == "dep": message_text = TEXTS[lang]['dep_success'].format(sum=sumdep)
    elif event == "wdr": message_text = TEXTS[lang]['wdr_request'].format(sum=wdr_sum, status=status)
    else: message_text = TEXTS[lang]['new_event'].format(event=event)

    if message_text:
        try: bot.send_message(chat_id, message_text)
        except Exception as e: print(f"Failed to send message to {chat_id}: {e}")

    return "OK", 200

# ===================================================================
# =========                   –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø               =========
# ===================================================================
if __name__ == "__main__":
    init_db()
    
    def run_bot():
        print("Starting bot polling...")
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ –æ—á–∏—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ 409 Conflict
        bot.delete_webhook(drop_pending_updates=True)
        bot.infinity_polling(skip_pending=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    threading.Thread(target=run_bot, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä Flask
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

