import os
import sqlite3
import threading
from flask import Flask, request, render_template, jsonify # –î–æ–±–∞–≤–∏–ª–∏ jsonify
import telebot

# ========= –ö–æ–Ω—Ñ–∏–≥–∏ =========
TOKEN = "8369181511:AAEvwUn5gQUAXizdvvUpbP4repqU26iKQd0" # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
REGISTER_LINK = "https://u3.shortink.io/register?utm_campaign=825192&utm_source=affiliate&utm_medium=sr&a=PDSrNY9vG5LpeF&ac=1d&code=50START"
# !!! –í–ê–ñ–ù–û: URL –≤–∞—à–µ–≥–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEB_APP_URL = "https://daaaaaan.onrender.com" 

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# ========= –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =========
def init_db():
    conn = sqlite3.connect("postbacks.db")
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS postbacks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    event TEXT,
                    subid TEXT,
                    trader_id TEXT,
                    sumdep REAL,
                    wdr_sum REAL,
                    status TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )""")
    conn.commit()
    conn.close()

def save_postback(event, subid, trader_id, sumdep=None, wdr_sum=None, status=None):
    conn = sqlite3.connect("postbacks.db")
    c = conn.cursor()
    c.execute("""INSERT INTO postbacks (event, subid, trader_id, sumdep, wdr_sum, status)
                 VALUES (?, ?, ?, ?, ?, ?)""",
              (event, subid, trader_id, sumdep, wdr_sum, status))
    conn.commit()
    conn.close()

# ========= –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ (–°–ò–õ–¨–ù–û –£–ü–†–û–©–ï–ù–ê) =========
@bot.message_handler(commands=['start'])
def start_message(message):
    # –¢–µ–ø–µ—Ä—å –±–æ—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    web_app_info = telebot.types.WebAppInfo(f"{WEB_APP_URL}/app")
    markup.add(telebot.types.KeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç", web_app=web_app_info))
    
    bot.send_message(
        message.chat.id, 
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞!\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –Ω–∞—á–∞—Ç—å.", 
        reply_markup=markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /myid –≤—Å–µ –µ—â–µ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@bot.message_handler(commands=['myid'])
def my_id(message):
    bot.send_message(message.chat.id, f"–¢–≤–æ–π Telegram ID: <b>{message.chat.id}</b>")


# ========= Flask: —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ API =========

# –°—Ç—Ä–∞–Ω–∏—Ü–∞-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL
@app.route("/")
def index():
    return "Web server for Telegram Mini App is running."

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∞–º–æ–≥–æ Mini App
@app.route("/app")
def app_page():
    return render_template("app.html")

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–û)
@app.route("/user/<int:chat_id>/data") # –ò–∑–º–µ–Ω–∏–ª–∏ URL –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
def user_data_api(chat_id):
    conn = sqlite3.connect("postbacks.db")
    c = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏–µ 'reg' –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute("SELECT 1 FROM postbacks WHERE subid = ? AND event = 'reg' LIMIT 1", (str(chat_id),))
    is_registered = c.fetchone() is not None
    
    events = []
    if is_registered:
        c.execute("SELECT event, sumdep, wdr_sum, status, created_at FROM postbacks WHERE subid = ? ORDER BY created_at DESC", (str(chat_id),))
        events = c.fetchall()
        
    conn.close()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏ —Å–æ–±—ã—Ç–∏—è
    return jsonify({"is_registered": is_registered, "events": events})

# ========= Flask: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–±–µ–∫–æ–≤ (–ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =========
@app.route("/postback", methods=["GET", "POST"])
def partner_postback():
    event = request.args.get("event")
    subid = request.args.get("subid")
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–±–µ–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ) ...
    # –ü—Ä–æ—Å—Ç–æ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–æ
    
    # ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ –∏–∑ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
    
    if not subid:
        return "No subid", 400
    try:
        chat_id = int(subid)
    except (ValueError, TypeError):
        return "Invalid subid", 400

    save_postback(event, subid, trader_id, sumdep, wdr_sum, status)

    if event == "reg":
        bot.send_message(chat_id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.")
    elif event == "FTD":
        bot.send_message(chat_id, f"üí∞ –í—ã –≤–Ω–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ ${sumdep}! –î–∞–Ω–Ω—ã–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π
    
    return "OK"

# ========= –ó–∞–ø—É—Å–∫ =========
if __name__ == "__main__":
    init_db()

    def run_bot():
        # –î–æ–±–∞–≤–∏–º –æ—á–∏—Å—Ç–∫—É –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ 409
        bot.delete_webhook(drop_pending_updates=True) 
        bot.infinity_polling()

    threading.Thread(target=run_bot).start()

    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
