import eventlet
eventlet.monkey_patch()

import os
import sqlite3
import threading
from flask import Flask, request, render_template, jsonify
from flask_socketio import SocketIO, join_room
import telebot

# ===================================================================
# ========= –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =
# ===================================================================
TOKEN = "8441945670:AAFTTAym0douRv4mUnFfDlu3k1eNsBATPu8"
WEB_APP_URL = "https://daaaaaan.onrender.com"
ADMIN_IDS = [6453186214, 5575262788, 1106921220] # ID –≤—Å–µ—Ö, –∫—Ç–æ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

# –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –°–ø–∏—Å–æ–∫ ID, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞—Ç —Ñ–∞–π–ª –ë–î
DEV_IDS = [5575262788, 1106921220]

# ===================================================================
# ========= –ü–ï–†–ï–í–û–î–´ (TEXTS) =========
# ===================================================================
TEXTS = {
    'ru': {
        'welcome': (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª—É—á—à–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –ò–ò –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n"
            "ü§ñ –Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ: –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ <b>–°–¢–ê–†–¢</b> –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        ),
        'my_id': "–¢–≤–æ–π Telegram ID: <b>{id}</b>",
        'reg_success': "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.",
        'ftd_success': "üí∞ <b>–ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç!</b>\n–í—ã –≤–Ω–µ—Å–ª–∏ <b>${sum}</b>. –î–∞–Ω–Ω—ã–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        'dep_success': "‚ûï <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å—á–µ—Ç –Ω–∞ <b>${sum}</b>. –î–∞–Ω–Ω—ã–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        'wdr_request': "üíµ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥</b>\n–°—É–º–º–∞: <b>{sum}</b>. –°—Ç–∞—Ç—É—Å: {status}",
        'new_event': "üîî <b>–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:</b> {event}"
    },
    'en': {
        'welcome': (
            "üëã Welcome to the best trading AI at the moment.\n\n"
            "ü§ñ I was created for one purpose: to help people make money.\n\n"
            "Press <b>START</b> in the bottom left corner to begin."
        ),
        'my_id': "Your Telegram ID: <b>{id}</b>",
        'reg_success': "‚úÖ <b>Registration confirmed!</b>\nYour personal cabinet has been updated.",
        'ftd_success': "üí∞ <b>First deposit!</b>\nYou've deposited <b>${sum}</b>. Your cabinet is updated.",
        'dep_success': "‚ûï <b>Deposit</b>\nYou have topped up your account with <b>${sum}</b>.",
        'wdr_request': "üíµ <b>Withdrawal request</b>\nAmount: <b>{sum}</b>. Status: {status}",
        'new_event': "üîî <b>New event:</b> {event}"
    }
}

# ===================================================================
# ========= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =========
# ===================================================================
app = Flask(__name__)
socketio = SocketIO(app, async_mode='eventlet')
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# ===================================================================
# ========= –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• =========
# ===================================================================
DB_NAME = "data.db"
def init_db():
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS postbacks (id INTEGER PRIMARY KEY AUTOINCREMENT, event TEXT, subid TEXT, trader_id TEXT, sumdep REAL, wdr_sum REAL, status TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)""")
    c.execute("""CREATE TABLE IF NOT EXISTS users (chat_id INTEGER PRIMARY KEY, lang TEXT, last_seen TIMESTAMP)""")
    conn.commit()
    conn.close()

def save_postback(event, subid, trader_id, sumdep=None, wdr_sum=None, status=None):
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    c = conn.cursor()
    c.execute("""INSERT INTO postbacks (event, subid, trader_id, sumdep, wdr_sum, status) VALUES (?, ?, ?, ?, ?, ?)""", (event, subid, trader_id, sumdep, wdr_sum, status))
    conn.commit()
    conn.close()

# ===================================================================
# ========= –õ–û–ì–ò–ö–ê –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ê =========
# ===================================================================
@bot.message_handler(commands=['start'])
def start_message(message):
    lang_code = message.from_user.language_code
    lang = 'ru' if lang_code and lang_code.startswith('ru') else 'en'
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    c = conn.cursor()
    c.execute("""INSERT INTO users (chat_id, lang, last_seen) VALUES (?, ?, CURRENT_TIMESTAMP) ON CONFLICT(chat_id) DO UPDATE SET lang=excluded.lang, last_seen=CURRENT_TIMESTAMP""", (message.chat.id, lang))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, TEXTS[lang]['welcome'])

@bot.message_handler(commands=['myid'])
def my_id(message):
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT lang FROM users WHERE chat_id = ?", (message.chat.id,))
    result = c.fetchone()
    conn.close()
    lang = result[0] if result else 'en'
    bot.send_message(message.chat.id, TEXTS[lang]['my_id'].format(id=message.chat.id))

# –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /state
@bot.message_handler(commands=['state'])
def show_stats(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id not in ADMIN_IDS: 
        return
        
    # --- –ë–ª–æ–∫ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤) ---
    try:
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT COUNT(chat_id) FROM users"); total_users = c.fetchone()[0]
        c.execute("SELECT COUNT(chat_id) FROM users WHERE last_seen >= datetime('now', '-1 hour')"); hourly_users = c.fetchone()[0]
        c.execute("SELECT COUNT(DISTINCT subid) FROM postbacks WHERE event = 'reg'"); total_regs = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM postbacks WHERE event = 'FTD' OR event = 'dep'"); total_deposits = c.fetchone()[0]
        conn.close()
        stats_text = (f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
                      f"<b>üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
                      f"<b>üïí –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —á–∞—Å:</b> {hourly_users}\n"
                      f"<b>‚úÖ –í—Å–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:</b> {total_regs}\n"
                      f"<b>üëë VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> 0 <i>(–ª–æ–≥–∏–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)</i>\n"
                      f"<b>üí∞ –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:</b> {total_deposits}")
        bot.send_message(message.chat.id, stats_text, parse_mode="HTML")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    # --- –ë–ª–æ–∫ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ë–î (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤) ---
    if message.from_user.id in DEV_IDS:
        try:
            with open(DB_NAME, 'rb') as db_file:
                bot.send_document(message.chat.id, db_file, caption="–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        except FileNotFoundError:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{DB_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ë–î: {e}")


# ===================================================================
# ========= –õ–û–ì–ò–ö–ê –í–ï–ë-–°–ï–†–í–ï–†–ê (FLASK) =========
# ===================================================================
@app.route("/")
def index(): return "Web server for Telegram Mini App is running."

@app.route("/app")
def app_page(): return render_template("app.html")

@app.route("/user/<int:chat_id>/data")
def user_data_api(chat_id):
    conn = sqlite3.connect(DB_NAME, check_same_thread=False); conn.row_factory = sqlite3.Row; c = conn.cursor()
    c.execute("INSERT INTO users (chat_id, last_seen) VALUES (?, CURRENT_TIMESTAMP) ON CONFLICT(chat_id) DO UPDATE SET last_seen=CURRENT_TIMESTAMP", (chat_id,)); conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    c.execute("SELECT created_at FROM postbacks WHERE subid = ? AND event = 'reg' ORDER BY created_at ASC LIMIT 1", (str(chat_id),)); 
    reg_row = c.fetchone()
    is_registered = reg_row is not None
    reg_date = reg_row[0] if reg_row else None
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    c.execute("SELECT event, sumdep FROM postbacks WHERE subid = ? ORDER BY created_at DESC", (str(chat_id),)); 
    rows = c.fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
    c.execute("SELECT MAX(sumdep) FROM postbacks WHERE subid = ? AND (event = 'FTD' OR event = 'dep')", (str(chat_id),))
    max_dep_row = c.fetchone()
    max_deposit = max_dep_row[0] if max_dep_row and max_dep_row[0] is not None else 0

    # === –ù–û–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–¥—Å—á–µ—Ç —Å—É–º–º—ã –≤—ã–≤–æ–¥–æ–≤ ===
    c.execute("SELECT SUM(wdr_sum) FROM postbacks WHERE subid = ?", (str(chat_id),))
    wdr_sum_row = c.fetchone()
    user_withdrawal_sum = wdr_sum_row[0] if wdr_sum_row and wdr_sum_row[0] is not None else 0.0
    # ===============================================

    events = []
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for row in rows:
        event_list = list(row)
        if event_list[0] in ['FTD', 'dep'] and event_list[1] is not None:
            try: event_list[1] = f"{(float(event_list[1]) / 94 * 100):.2f}"
            except (ValueError, TypeError): pass
        events.append(event_list)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
    try:
        max_deposit_display = f"{(float(max_deposit) / 94 * 100):.2f}"
    except (ValueError, TypeError, ZeroDivisionError):
        max_deposit_display = "0.00"

    conn.close()
    
    return jsonify({
        "is_registered": is_registered, 
        "reg_date": reg_date,
        "max_deposit": max_deposit_display,
        "user_withdrawal_sum": user_withdrawal_sum, # –ù–æ–≤–æ–µ –ø–æ–ª–µ —Å —Å—É–º–º–æ–π –≤—ã–≤–æ–¥–æ–≤
        "events": events
    })
def _process_and_notify(event, subid, data):
    try:
        chat_id = int(subid)
        sumdep_raw = data.get("sumdep")
        save_postback(event, subid, data.get("trader_id"), sumdep_raw, data.get("wdr_sum"), data.get("status"))
        socketio.emit('update_data', {'message': f'New event: {event}'}, room=str(chat_id))
        conn = sqlite3.connect(DB_NAME, check_same_thread=False); c = conn.cursor()
        c.execute("SELECT lang FROM users WHERE chat_id = ?", (chat_id,)); result = c.fetchone(); conn.close()
        lang = result[0] if result else 'en'
        message_text = ""
        if event in ["FTD", "dep"] and sumdep_raw:
            try: display_sum = f"{(float(sumdep_raw) / 94 * 100):.2f}"
            except (ValueError, TypeError, ZeroDivisionError): display_sum = sumdep_raw
            message_key = 'ftd_success' if event == 'FTD' else 'dep_success'
            message_text = TEXTS[lang][message_key].format(sum=display_sum)
        elif event == "reg":
            message_text = TEXTS[lang]['reg_success']
        if message_text:
            bot.send_message(chat_id, message_text)
    except Exception as e:
        print(f"Error processing postback for subid {subid}: {e}")

@app.route("/postback", methods=["GET", "POST"])
def partner_postback():
    data = request.args
    event = data.get("event")
    subid = data.get("subid")
    if not subid: return "No subid provided", 400
    _process_and_notify(event, subid, data)
    return "OK", 200

# ===================================================================
# ========= –õ–û–ì–ò–ö–ê WEBSOCKET =========
# ===================================================================
@socketio.on('connect')
def handle_connect(): print('Client connected to WebSocket')

@socketio.on('join')
def handle_join(data):
    chat_id = data.get('chat_id')
    if chat_id:
        print(f"Client with chat_id {chat_id} joined room.")
        join_room(str(chat_id))

# ===================================================================
# ========= –¢–ï–°–¢–û–í–´–ï –ú–ê–†–®–†–£–¢–´ =========
# ===================================================================
@app.route("/test_registration")
def add_test_registration():
    chat_id_str = request.args.get("chat_id")
    if not chat_id_str: return "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ 'chat_id'.", 400
    _process_and_notify('reg', chat_id_str, {})
    return f"–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è ID {chat_id_str} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞.", 200

@app.route("/test_deposit")
def add_test_deposit():
    chat_id_str = request.args.get("chat_id")
    sum_str = request.args.get("sum", "94")
    if not chat_id_str: return "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ 'chat_id'.", 400
    _process_and_notify('FTD', chat_id_str, {'sumdep': sum_str})
    return f"–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è ID {chat_id_str} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω.", 200

# ===================================================================
# ========= –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =========
# ===================================================================
if __name__ == "__main__":
    init_db()
    def run_bot():
        print("Starting bot polling...")
        bot.delete_webhook(drop_pending_updates=True)
        bot.infinity_polling(skip_pending=True)
    threading.Thread(target=run_bot, daemon=True).start()
    port = int(os.environ.get("PORT", 8080))
    socketio.run(app, host="0.0.0.0", port=port, log_output=True)

