import os
import sqlite3
import threading
from flask import Flask, request, render_template, jsonify
import telebot

# ===================================================================
# ========= –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =
# ===================================================================
TOKEN = "8441945670:AAFTTAym0douRv4mUnFfDlu3k1eNsBATPu8"
WEB_APP_URL = "https://daaaaaan.onrender.com"

# –î–æ–±–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram ID
ADMIN_IDS = [6453186214]  # <-- –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID.

# ===================================================================
# ========= –ü–ï–†–ï–í–û–î–´ (TEXTS) =========
# ===================================================================
TEXTS = {
    'ru': {
        'welcome': "–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞!\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ú–µ–Ω—é</b> —Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.",
        'my_id': "–¢–≤–æ–π Telegram ID: <b>{id}</b>",
        'reg_success': "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.",
        'ftd_success': "üí∞ <b>–ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç!</b>\n–í—ã –≤–Ω–µ—Å–ª–∏ <b>${sum}</b>. –î–∞–Ω–Ω—ã–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        'dep_success': "‚ûï <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å—á–µ—Ç –Ω–∞ <b>${sum}</b>. –î–∞–Ω–Ω—ã–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        'wdr_request': "üíµ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥</b>\n–°—É–º–º–∞: <b>{sum}</b>. –°—Ç–∞—Ç—É—Å: {status}",
        'new_event': "üîî <b>–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:</b> {event}"
    },
    'en': {
        'welcome': "Hello üëã I'm a trading bot!\n\nPress the <b>Menu</b> button in the bottom left to open your personal cabinet.",
        'my_id': "Your Telegram ID: <b>{id}</b>",
        'reg_success': "‚úÖ <b>Registration confirmed!</b>\nYour personal cabinet has been updated.",
        'ftd_success': "üí∞ <b>First deposit!</b>\nYou've deposited <b>${sum}</b>. Your cabinet is updated.",
        'dep_success': "‚ûï <b>Deposit</b>\nYou have topped up your account with <b>${sum}</b>.",
        'wdr_request': "üíµ <b>Withdrawal request</b>\nAmount: <b>{sum}</b>. Status: {status}",
        'new_event': "üîî <b>New event:</b> {event}"
    }
}

# ===================================================================
# ========= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –í–ï–ë-–°–ï–†–í–ï–†–ê =========
# ===================================================================
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# ===================================================================
# ========= –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• =========
# ===================================================================
DB_NAME = "data.db"

def init_db():
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS postbacks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        event TEXT, subid TEXT, trader_id TEXT,
        sumdep REAL, wdr_sum REAL, status TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        chat_id INTEGER PRIMARY KEY,
        lang TEXT,
        last_seen TIMESTAMP
    )""")
    conn.commit()
    conn.close()

def save_postback(event, subid, trader_id, sumdep=None, wdr_sum=None, status=None):
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    c = conn.cursor()
    c.execute("""INSERT INTO postbacks (event, subid, trader_id, sumdep, wdr_sum, status)
        VALUES (?, ?, ?, ?, ?, ?)""",
        (event, subid, trader_id, sumdep, wdr_sum, status))
    conn.commit()
    conn.close()

# ===================================================================
# ========= –õ–û–ì–ò–ö–ê –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ê =========
# ===================================================================
@bot.message_handler(commands=['start'])
def start_message(message):
    lang_code = message.from_user.language_code
    lang = 'ru' if lang_code and lang_code.startswith('ru') else 'en'
    
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    c = conn.cursor()
    c.execute("""
        INSERT INTO users (chat_id, lang, last_seen) VALUES (?, ?, CURRENT_TIMESTAMP)
        ON CONFLICT(chat_id) DO UPDATE SET lang=excluded.lang, last_seen=CURRENT_TIMESTAMP
    """, (message.chat.id, lang))
    conn.commit()
    conn.close()
    
    bot.send_message(message.chat.id, TEXTS[lang]['welcome'])

@bot.message_handler(commands=['myid'])
def my_id(message):
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT lang FROM users WHERE chat_id = ?", (message.chat.id,))
    result = c.fetchone()
    conn.close()
    lang = result[0] if result else 'en'
    bot.send_message(message.chat.id, TEXTS[lang]['my_id'].format(id=message.chat.id))

@bot.message_handler(commands=['state'])
def show_stats(message):
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT COUNT(chat_id) FROM users")
        total_users = c.fetchone()[0]
        c.execute("SELECT COUNT(chat_id) FROM users WHERE last_seen >= datetime('now', '-1 hour')")
        hourly_users = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM postbacks WHERE event = 'reg'")
        total_regs = c.fetchone()[0]
        vip_users = 0
        c.execute("SELECT COUNT(*) FROM postbacks WHERE event = 'FTD' OR event = 'dep'")
        total_deposits = c.fetchone()[0]
        conn.close()

        stats_text = (
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"<b>üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
            f"<b>üïí –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —á–∞—Å:</b> {hourly_users}\n"
            f"<b>‚úÖ –í—Å–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:</b> {total_regs}\n"
            f"<b>üëë VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {vip_users} <i>(–ª–æ–≥–∏–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)</i>\n"
            f"<b>üí∞ –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:</b> {total_deposits}"
        )
        bot.send_message(message.chat.id, stats_text, parse_mode="HTML")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# ===================================================================
# ========= –õ–û–ì–ò–ö–ê –í–ï–ë-–°–ï–†–í–ï–†–ê (FLASK) =========
# ===================================================================
@app.route("/")
def index():
    return "Web server for Telegram Mini App is running."

@app.route("/app")
def app_page():
    return render_template("app.html")

@app.route("/user/<int:chat_id>/data")
def user_data_api(chat_id):
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    c = conn.cursor()
    
    c.execute("""
        INSERT INTO users (chat_id, last_seen) VALUES (?, CURRENT_TIMESTAMP)
        ON CONFLICT(chat_id) DO UPDATE SET last_seen=CURRENT_TIMESTAMP
    """, (chat_id,))
    conn.commit()
    
    c.execute("SELECT 1 FROM postbacks WHERE subid = ? AND event = 'reg' LIMIT 1", (str(chat_id),))
    is_registered = c.fetchone() is not None
    
    c.execute("SELECT event, sumdep, wdr_sum, status, created_at FROM postbacks WHERE subid = ? ORDER BY created_at DESC", (str(chat_id),))
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Mini App
    rows = c.fetchall()
    events = []
    for row in rows:
        event_list = list(row)
        # event_list[0] - —ç—Ç–æ 'event', event_list[1] - 'sumdep'
        if event_list[0] in ['FTD', 'dep'] and event_list[1] is not None:
            try:
                raw_sum = float(event_list[1])
                calculated_sum = raw_sum / 94 * 100
                event_list[1] = f"{calculated_sum:.2f}"  # –ó–∞–º–µ–Ω—è–µ–º "—Å—ã—Ä—É—é" —Å—É–º–º—É –Ω–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–æ 2 –∑–Ω–∞–∫–æ–≤
            except (ValueError, TypeError):
                pass # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        events.append(event_list)
        
    conn.close()
    return jsonify({"is_registered": is_registered, "events": events})

@app.route("/postback", methods=["GET", "POST"])
def partner_postback():
    data = request.args
    event = data.get("event")
    subid = data.get("subid")
    trader_id = data.get("trader_id")
    sumdep_raw = data.get("sumdep") # –ü–æ–ª—É—á–∞–µ–º "—Å—ã—Ä—É—é" —Å—É–º–º—É
    wdr_sum = data.get("wdr_sum")
    status = data.get("status")

    if not subid:
        return "No subid provided", 400
    try:
        chat_id = int(subid)
    except (ValueError, TypeError):
        return "Invalid subid", 400

    # –í –±–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º "—Å—ã—Ä—É—é" —Å—É–º–º—É
    save_postback(event, subid, trader_id, sumdep_raw, wdr_sum, status)

    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT lang FROM users WHERE chat_id = ?", (chat_id,))
    result = c.fetchone()
    conn.close()
    lang = result[0] if result else 'en'
    
    message_text = ""
    
    if event in ["FTD", "dep"]:
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            calculated_sum = float(sumdep_raw) / 94 * 100
            display_sum = f"{calculated_sum:.2f}" # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            if event == "FTD":
                message_text = TEXTS[lang]['ftd_success'].format(sum=display_sum)
            else:
                message_text = TEXTS[lang]['dep_success'].format(sum=display_sum)
        except (ValueError, TypeError, ZeroDivisionError):
            # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if event == "FTD":
                 message_text = TEXTS[lang]['ftd_success'].format(sum=sumdep_raw)
            else:
                 message_text = TEXTS[lang]['dep_success'].format(sum=sumdep_raw)

    elif event == "reg": message_text = TEXTS[lang]['reg_success']
    elif event == "wdr": message_text = TEXTS[lang]['wdr_request'].format(sum=wdr_sum, status=status)
    else: message_text = TEXTS[lang]['new_event'].format(event=event)

    if message_text:
        try:
            bot.send_message(chat_id, message_text)
        except Exception as e:
            print(f"Failed to send message to {chat_id}: {e}")

    return "OK", 200

# ===================================================================
# ========= –¢–ï–°–¢–û–í–´–ï –ú–ê–†–®–†–£–¢–´ =========
# ===================================================================
@app.route("/test_registration")
def add_test_registration():
    chat_id_str = request.args.get("chat_id")
    if not chat_id_str: return "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ 'chat_id' –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö URL.", 400
    try: chat_id = int(chat_id_str)
    except ValueError: return "–û—à–∏–±–∫–∞: 'chat_id' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", 400
    save_postback(event="reg", subid=str(chat_id), trader_id=f"test_trader_{chat_id}")
    try:
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT lang FROM users WHERE chat_id = ?", (chat_id,))
        result = c.fetchone()
        conn.close()
        lang = result[0] if result else 'en'
        bot.send_message(chat_id, TEXTS[lang]['reg_success'])
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {chat_id}: {e}")
    return f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {chat_id}.", 200

@app.route("/test_deposit")
def add_test_deposit():
    # –ü–∞—Ä–∞–º–µ—Ç—Ä "sum" —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ—Ç—Å—è "—Å—ã—Ä–æ–π" —Å—É–º–º–æ–π (94%)
    chat_id_str = request.args.get("chat_id")
    sum_str = request.args.get("sum", "94") # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 94, —á—Ç–æ–±—ã –≤ –∏—Ç–æ–≥–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å 100
    if not chat_id_str: return "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ 'chat_id' –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö URL.", 400
    try:
        chat_id = int(chat_id_str)
        raw_deposit_sum = float(sum_str)
    except ValueError: return "–û—à–∏–±–∫–∞: 'chat_id' –∏ 'sum' –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.", 400

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É "—Å—ã—Ä—É—é" —Å—É–º–º—É
    save_postback(event="FTD", subid=str(chat_id), trader_id=f"test_trader_{chat_id}", sumdep=raw_deposit_sum, status="approved")

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—É–º–º—É
    try:
        calculated_sum = raw_deposit_sum / 94 * 100
        display_sum = f"{calculated_sum:.2f}"

        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT lang FROM users WHERE chat_id = ?", (chat_id,))
        result = c.fetchone()
        conn.close()
        lang = result[0] if result else 'en'
        
        message_text = TEXTS[lang]['ftd_success'].format(sum=display_sum)
        bot.send_message(chat_id, message_text)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–ø–æ–∑–∏—Ç–µ {chat_id}: {e}")

    return f"–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è ID {chat_id}.<br>–°—ã—Ä–∞—è —Å—É–º–º–∞ (94%): ${raw_deposit_sum}.<br>–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è —Å—É–º–º–∞ (100%): ${display_sum}.", 200

# ===================================================================
# ========= –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =========
# ===================================================================
if __name__ == "__main__":
    init_db()
    def run_bot():
        print("Starting bot polling...")
        bot.delete_webhook(drop_pending_updates=True)
        bot.infinity_polling(skip_pending=True)
    threading.Thread(target=run_bot, daemon=True).start()
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

