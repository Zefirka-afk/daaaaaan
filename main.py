import os
import sqlite3
import threading
from flask import Flask, request, render_template, jsonify
import telebot

# ========= –ö–æ–Ω—Ñ–∏–≥–∏ =========
# –í–ê–ñ–ù–û: –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!
TOKEN = "8183205134:AAEJ95MtbBfYQXOej4ZBxb3GRyS1oz56qlY"
REGISTER_LINK = "https://u3.shortink.io/register?utm_campaign=825192&utm_source=affiliate&utm_medium=sr&a=PDSrNY9vG5LpeF&ac=1d&code=50START"
# URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok, –¥–ª—è –ø—Ä–æ–¥–∞ - Render/Heroku/etc.
WEB_APP_URL = "https://your-domain.onrender.com" # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô –ê–î–†–ï–°

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# ========= –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ =========
# –•—Ä–∞–Ω–∏–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í –ø—Ä–æ–¥–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞ Redis.
user_data = {}

# ========= –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =========
def init_db():
    conn = sqlite3.connect("postbacks.db", check_same_thread=False)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS postbacks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    event TEXT,
                    subid TEXT,
                    trader_id TEXT,
                    sumdep REAL,
                    wdr_sum REAL,
                    status TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )""")
    conn.commit()
    conn.close()

def save_postback(event, subid, trader_id, sumdep=None, wdr_sum=None, status=None):
    conn = sqlite3.connect("postbacks.db", check_same_thread=False)
    c = conn.cursor()
    c.execute("""INSERT INTO postbacks (event, subid, trader_id, sumdep, wdr_sum, status)
                 VALUES (?, ?, ?, ?, ?, ?)""",
              (event, subid, trader_id, sumdep, wdr_sum, status))
    conn.commit()
    conn.close()

# ========= –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ =========
@bot.message_handler(commands=['start'])
def start_message(message):
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = "ru" if (message.from_user.language_code or "").startswith("ru") else "en"
    user_data[message.chat.id] = {"lang": lang}

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Mini App
    markup = telebot.types.InlineKeyboardMarkup()
    web_app_info = telebot.types.WebAppInfo(WEB_APP_URL)
    app_button = telebot.types.InlineKeyboardButton(
        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç" if lang == "ru" else "üöÄ Open App",
        web_app=web_app_info
    )
    markup.add(app_button)
    
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å." if lang == "ru" else "üëã Hello! Press the button below to start.",
        reply_markup=markup
    )

# ========= Flask: —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è Mini App =========

# 1. –û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
@app.route("/")
def index():
    return render_template("index.html")

# 2. API: Mini App –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@app.route("/get_user_status/<int:chat_id>")
def get_user_status(chat_id):
    conn = sqlite3.connect("postbacks.db", check_same_thread=False)
    c = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
    c.execute("SELECT sumdep FROM postbacks WHERE subid = ? AND event IN ('FTD', 'dep') ORDER BY created_at ASC LIMIT 1", (str(chat_id),))
    deposit_row = c.fetchone()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    c.execute("SELECT 1 FROM postbacks WHERE subid = ? AND event = 'reg' LIMIT 1", (str(chat_id),))
    reg_row = c.fetchone()
    
    conn.close()

    status = "unregistered"
    deposit_amount = 0

    if deposit_row:
        status = "deposited"
        deposit_amount = deposit_row[0]
    elif reg_row:
        status = "registered"
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = user_data.get(chat_id, {}).get("lang", "en")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    referral_link = f"{REGISTER_LINK}&sub_id1={chat_id}"

    return jsonify({
        "status": status,
        "deposit_amount": deposit_amount,
        "lang": lang,
        "referral_link": referral_link
    })


# ========= Flask: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–±–µ–∫–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =========
@app.route("/postback", methods=["GET", "POST"])
def partner_postback():
    event = request.args.get("event")
    subid = request.args.get("subid")
    trader_id = request.args.get("trader_id")
    sumdep = request.args.get("sumdep")
    
    if not subid: return "No subid"
    try: chat_id = int(subid)
    except: return "Invalid subid"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
    save_postback(event, subid, trader_id, sumdep)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    lang = user_data.get(chat_id, {}).get("lang", "en")

    if event == "reg":
        if lang == "ru":
            bot.send_message(chat_id, f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! Trader ID: {trader_id}\n\n–¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        else:
            bot.send_message(chat_id, f"‚úÖ Registration confirmed! Trader ID: {trader_id}\n\nPlease return to the app to continue.")
    
    elif event == "FTD":
        if lang == "ru":
            bot.send_message(chat_id, f"üí∞ –í–∞—à –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ ${sumdep} –∑–∞—á–∏—Å–ª–µ–Ω! Trader ID: {trader_id}\n\n–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å!")
        else:
            bot.send_message(chat_id, f"üí∞ Your first deposit of ${sumdep} is confirmed! Trader ID: {trader_id}\n\nGreat, now you can start!")

    return "OK"

# ========= –ó–∞–ø—É—Å–∫ =========
if __name__ == "__main__":
    init_db()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=bot.infinity_polling, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
    # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Gunicorn –∏–ª–∏ –¥—Ä—É–≥–æ–π WSGI-—Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port, debug=True) # debug=True –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏









