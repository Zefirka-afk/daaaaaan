import os
import sqlite3
import threading
from flask import Flask, request, render_template, jsonify
import telebot

# ===================================================================
# ========= –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =========
# ===================================================================
# !!! –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
TOKEN = "8441945670:AAFTTAym0douRv4mUnFfDlu3k1eNsBATPu8"  # <-- –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–ò–ú –¢–û–ö–ï–ù–û–ú

# !!! –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Render
# –ü—Ä–∏–º–µ—Ä: "https://your-app-name.onrender.com"
WEB_APP_URL = "https://daaaaaan.onrender.com" # <-- –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–ò–ú URL

# ===================================================================
# ========= –ü–ï–†–ï–í–û–î–´ (TEXTS) =========
# ===================================================================
TEXTS = {
    'ru': {
        'welcome': "–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞!\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ú–µ–Ω—é</b> —Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.",
        'my_id': "–¢–≤–æ–π Telegram ID: <b>{id}</b>",
        'reg_success': "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.",
        'ftd_success': "üí∞ <b>–ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç!</b>\n–í—ã –≤–Ω–µ—Å–ª–∏ <b>{sum}</b>. –î–∞–Ω–Ω—ã–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        'dep_success': "‚ûï <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å—á–µ—Ç –Ω–∞ <b>{sum}</b>. –î–∞–Ω–Ω—ã–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        'wdr_request': "üíµ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥</b>\n–°—É–º–º–∞: <b>{sum}</b>. –°—Ç–∞—Ç—É—Å: {status}",
        'new_event': "üîî <b>–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:</b> {event}"
    },
    'en': {
        'welcome': "Hello üëã I'm a trading bot!\n\nPress the <b>Menu</b> button in the bottom left to open your personal cabinet.",
        'my_id': "Your Telegram ID: <b>{id}</b>",
        'reg_success': "‚úÖ <b>Registration confirmed!</b>\nYour personal cabinet has been updated.",
        'ftd_success': "üí∞ <b>First deposit!</b>\nYou've deposited <b>{sum}</b>. Your cabinet is updated.",
        'dep_success': "‚ûï <b>Deposit</b>\nYou have topped up your account with <b>{sum}</b>.",
        'wdr_request': "üíµ <b>Withdrawal request</b>\nAmount: <b>{sum}</b>. Status: {status}",
        'new_event': "üîî <b>New event:</b> {event}"
    }
}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
user_langs = {}

# ===================================================================
# ========= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –í–ï–ë-–°–ï–†–í–ï–†–ê =========
# ===================================================================
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__) 

# ===================================================================
# ========= –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• =========
# ===================================================================
def init_db():
    conn = sqlite3.connect("postbacks.db", check_same_thread=False)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS postbacks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        event TEXT, subid TEXT, trader_id TEXT,
        sumdep REAL, wdr_sum REAL, status TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )""")
    conn.commit()
    conn.close()import os
import sqlite3
import threading
from flask import Flask, request, render_template, jsonify
import telebot
import random
import time

# ===================================================================
# ========= –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =========
# ===================================================================
# !!! –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
TOKEN = "8441945670:AAFTTAym0douRv4mUnFfDlu3k1eNsBATPu8"  # <-- –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–ò–ú –¢–û–ö–ï–ù–û–ú

# !!! –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Render
# –ü—Ä–∏–º–µ—Ä: "https://your-app-name.onrender.com"
WEB_APP_URL = "https://daaaaaan.onrender.com" # <-- –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–ò–ú URL

# ===================================================================
# ========= –ü–ï–†–ï–í–û–î–´ (TEXTS) =========
# ===================================================================
TEXTS = {
    'ru': {
        'welcome': "–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞!\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ú–µ–Ω—é</b> —Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.",
        'my_id': "–¢–≤–æ–π Telegram ID: <b>{id}</b>",
        'reg_success': "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.",
        'ftd_success': "üí∞ <b>–ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç!</b>\n–í—ã –≤–Ω–µ—Å–ª–∏ <b>{sum}</b>. –î–∞–Ω–Ω—ã–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        'dep_success': "‚ûï <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å—á–µ—Ç –Ω–∞ <b>{sum}</b>. –î–∞–Ω–Ω—ã–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        'wdr_request': "üíµ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥</b>\n–°—É–º–º–∞: <b>{sum}</b>. –°—Ç–∞—Ç—É—Å: {status}",
        'new_event': "üîî <b>–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:</b> {event}"
    },
    'en': {
        'welcome': "Hello üëã I'm a trading bot!\n\nPress the <b>Menu</b> button in the bottom left to open your personal cabinet.",
        'my_id': "Your Telegram ID: <b>{id}</b>",
        'reg_success': "‚úÖ <b>Registration confirmed!</b>\nYour personal cabinet has been updated.",
        'ftd_success': "üí∞ <b>First deposit!</b>\nYou've deposited <b>{sum}</b>. Your cabinet is updated.",
        'dep_success': "‚ûï <b>Deposit</b>\nYou have topped up your account with <b>{sum}</b>.",
        'wdr_request': "üíµ <b>Withdrawal request</b>\nAmount: <b>{sum}</b>. Status: {status}",
        'new_event': "üîî <b>New event:</b> {event}"
    }
}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
user_langs = {}

# ===================================================================
# ========= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –í–ï–ë-–°–ï–†–í–ï–†–ê =========
# ===================================================================
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__) 

# ===================================================================
# ========= –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• =========
# ===================================================================
def init_db():
    conn = sqlite3.connect("postbacks.db", check_same_thread=False)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS postbacks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        event TEXT, subid TEXT, trader_id TEXT,
        sumdep REAL, wdr_sum REAL, status TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )""")
    conn.commit()
    conn.close()

def save_postback(event, subid, trader_id, sumdep=None, wdr_sum=None, status=None):
    conn = sqlite3.connect("postbacks.db", check_same_thread=False)
    c = conn.cursor()
    c.execute("""INSERT INTO postbacks (event, subid, trader_id, sumdep, wdr_sum, status)
        VALUES (?, ?, ?, ?, ?, ?)""",
        (event, subid, trader_id, sumdep, wdr_sum, status))
    conn.commit()
    conn.close()

# ===================================================================
# ========= –õ–û–ì–ò–ö–ê –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ê =========
# ===================================================================
@bot.message_handler(commands=['start'])
def start_message(message):
    lang_code = message.from_user.language_code
    lang = 'ru' if lang_code and lang_code.startswith('ru') else 'en'
    user_langs[message.chat.id] = lang
    bot.send_message(message.chat.id, TEXTS[lang]['welcome'])

@bot.message_handler(commands=['myid'])
def my_id(message):
    lang = user_langs.get(message.chat.id, 'en')
    bot.send_message(message.chat.id, TEXTS[lang]['my_id'].format(id=message.chat.id))

# ===================================================================
# ========= –õ–û–ì–ò–ö–ê –í–ï–ë-–°–ï–†–í–ï–†–ê (FLASK) =========
# ===================================================================
@app.route("/")
def index():
    return "Web server for Telegram Mini App is running."

@app.route("/app")
def app_page():
    return render_template("app.html")

@app.route("/user/<int:chat_id>/data")
def user_data_api(chat_id):
    conn = sqlite3.connect("postbacks.db", check_same_thread=False)
    conn.row_factory = sqlite3.Row 
    c = conn.cursor()
    
    c.execute("SELECT 1 FROM postbacks WHERE subid = ? AND event = 'reg' LIMIT 1", (str(chat_id),))
    is_registered = c.fetchone() is not None
    
    c.execute("SELECT event, sumdep, wdr_sum, status, created_at FROM postbacks WHERE subid = ? ORDER BY created_at DESC", (str(chat_id),))
    events = [list(row) for row in c.fetchall()]
        
    conn.close()
    return jsonify({"is_registered": is_registered, "events": events})

@app.route("/postback", methods=["GET", "POST"])
def partner_postback():
    data = request.args
    event = data.get("event")
    subid = data.get("subid")
    trader_id = data.get("trader_id")
    sumdep = data.get("sumdep")
    wdr_sum = data.get("wdr_sum")
    status = data.get("status")

    if not subid:
        return "No subid provided", 400
    try:
        chat_id = int(subid)
    except (ValueError, TypeError):
        return "Invalid subid", 400

    save_postback(event, subid, trader_id, sumdep, wdr_sum, status)

    lang = user_langs.get(chat_id, 'en')
    message_text = ""
    
    if event == "reg": message_text = TEXTS[lang]['reg_success']
    elif event == "FTD": message_text = TEXTS[lang]['ftd_success'].format(sum=sumdep)
    elif event == "dep": message_text = TEXTS[lang]['dep_success'].format(sum=sumdep)
    elif event == "wdr": message_text = TEXTS[lang]['wdr_request'].format(sum=wdr_sum, status=status)
    else: message_text = TEXTS[lang]['new_event'].format(event=event)

    if message_text:
        try:
            bot.send_message(chat_id, message_text)
        except Exception as e:
            print(f"Failed to send message to {chat_id}: {e}")

    return "OK", 200

# ===================================================================
# ========= –¢–ï–°–¢–û–í–´–ô –ú–ê–†–®–†–£–¢ –î–õ–Ø –ò–ú–ò–¢–ê–¶–ò–ò –î–ï–ü–û–ó–ò–¢–ê =========
# ===================================================================
@app.route("/test_deposit")
def add_test_deposit():
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
    # –ü—Ä–∏–º–µ—Ä: /test_deposit?chat_id=1234567&sum=50
    chat_id_str = request.args.get("chat_id")
    sum_str = request.args.get("sum", "50") # –°—É–º–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞

    if not chat_id_str:
        return "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ 'chat_id' –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö URL.", 400

    try:
        chat_id = int(chat_id_str)
        deposit_sum = float(sum_str)
    except ValueError:
        return "–û—à–∏–±–∫–∞: 'chat_id' –∏ 'sum' –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.", 400

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ 'FTD' (First Time Deposit)
    save_postback(
        event="FTD",
        subid=str(chat_id),
        trader_id="test_trader_001", # ID —Ç—Ä–µ–π–¥–µ—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º –¥–ª—è —Ç–µ—Å—Ç–∞
        sumdep=deposit_sum,
        wdr_sum=None,
        status="approved"
    )

    # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
    try:
        lang = user_langs.get(chat_id, 'en')
        message_text = TEXTS[lang]['ftd_success'].format(sum=deposit_sum)
        bot.send_message(chat_id, message_text)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä
    return f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ ${deposit_sum} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {chat_id}.<br>–ó–∞–∫—Ä–æ–π—Ç–µ –∏ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ Mini App, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.", 200


# ===================================================================
# ========= –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =========
# ===================================================================
if __name__ == "__main__":
    init_db()

    def run_bot():
        print("Starting bot polling...")
        bot.delete_webhook(drop_pending_updates=True)
        bot.infinity_polling(skip_pending=True)

    threading.Thread(target=run_bot, daemon=True).start()

    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
